// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
}

type ArchiveAccount struct {
	Success *bool   `json:"success"`
	Errors  *string `json:"errors"`
}

type CreateMember struct {
	Member  *Member `json:"member"`
	Success *bool   `json:"success"`
	Msg     *string `json:"msg"`
}

type DeleteMember struct {
	Success *bool `json:"success"`
}

type ObtainJSONWebToken struct {
	Payload          string    `json:"payload"`
	RefreshExpiresIn int       `json:"refreshExpiresIn"`
	Success          *bool     `json:"success"`
	Errors           *string   `json:"errors"`
	User             *UserNode `json:"user"`
	Unarchiving      *bool     `json:"unarchiving"`
	Token            string    `json:"token"`
	RefreshToken     string    `json:"refreshToken"`
}

type RefreshToken struct {
	Payload          string  `json:"payload"`
	RefreshExpiresIn int     `json:"refreshExpiresIn"`
	Success          *bool   `json:"success"`
	Errors           *string `json:"errors"`
	Token            string  `json:"token"`
	RefreshToken     string  `json:"refreshToken"`
}

type RevokeToken struct {
	Revoked int     `json:"revoked"`
	Success *bool   `json:"success"`
	Errors  *string `json:"errors"`
}

type SendSecondaryEmailActivation struct {
	Success *bool   `json:"success"`
	Errors  *string `json:"errors"`
}

type SwapEmails struct {
	Success *bool   `json:"success"`
	Errors  *string `json:"errors"`
}

type UpdateMember struct {
	Member  *Member `json:"member"`
	Success *bool   `json:"success"`
}

type UserNode struct {
	ID             string           `json:"id"`
	LastLogin      *string          `json:"lastLogin"`
	Username       string           `json:"username"`
	FirstName      string           `json:"firstName"`
	LastName       string           `json:"lastName"`
	IsStaff        bool             `json:"isStaff"`
	IsActive       bool             `json:"isActive"`
	DateJoined     string           `json:"dateJoined"`
	Email          *string          `json:"email"`
	FirebaseID     *string          `json:"firebaseId"`
	Nickname       *string          `json:"nickname"`
	Name           *string          `json:"name"`
	Gender         CustomUserGender `json:"gender"`
	Phone          *string          `json:"phone"`
	Birthday       *string          `json:"birthday"`
	Country        *string          `json:"country"`
	City           *string          `json:"city"`
	District       *string          `json:"district"`
	Address        *string          `json:"address"`
	ProfileImage   *string          `json:"profileImage"`
	Pk             *int             `json:"pk"`
	Archived       *bool            `json:"archived"`
	Verified       *bool            `json:"verified"`
	SecondaryEmail *string          `json:"secondaryEmail"`
}

func (UserNode) IsNode() {}

type VerifyAccount struct {
	Success *bool   `json:"success"`
	Errors  *string `json:"errors"`
}

type VerifySecondaryEmail struct {
	Success *bool   `json:"success"`
	Errors  *string `json:"errors"`
}

type VerifyToken struct {
	Payload string  `json:"payload"`
	Success *bool   `json:"success"`
	Errors  *string `json:"errors"`
}

type Member struct {
	ID          string           `json:"id"`
	LastLogin   *string          `json:"lastLogin"`
	Username    string           `json:"username"`
	IsStaff     bool             `json:"isStaff"`
	IsActive    bool             `json:"isActive"`
	DateJoined  string           `json:"dateJoined"`
	Email       *string          `json:"email"`
	FirebaseID  *string          `json:"firebaseId"`
	Nickname    *string          `json:"nickname"`
	Name        *string          `json:"name"`
	Gender      CustomUserGender `json:"gender"`
	Phone       *string          `json:"phone"`
	Birthday    *string          `json:"birthday"`
	Country     *string          `json:"country"`
	City        *string          `json:"city"`
	District    *string          `json:"district"`
	Address     *string          `json:"address"`
	IsSuperuser bool             `json:"isSuperuser"`
}

type CustomUserGender string

const (
	CustomUserGenderA1 CustomUserGender = "A_1"
	CustomUserGenderA2 CustomUserGender = "A_2"
	CustomUserGenderA0 CustomUserGender = "A_0"
	CustomUserGenderA3 CustomUserGender = "A_3"
)

var AllCustomUserGender = []CustomUserGender{
	CustomUserGenderA1,
	CustomUserGenderA2,
	CustomUserGenderA0,
	CustomUserGenderA3,
}

func (e CustomUserGender) IsValid() bool {
	switch e {
	case CustomUserGenderA1, CustomUserGenderA2, CustomUserGenderA0, CustomUserGenderA3:
		return true
	}
	return false
}

func (e CustomUserGender) String() string {
	return string(e)
}

func (e *CustomUserGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomUserGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomUserGender", str)
	}
	return nil
}

func (e CustomUserGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
